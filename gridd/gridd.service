#!/usr/bin/env perl

# $Id: gridd.service,v 1.14 2008/10/27 16:29:40 racciari Exp $

BEGIN {
	push(@INC, '/opt/local/service/bin');
}

require 'libressource.pl';

use strict;
use warnings;

my $ns_name = undef;
my $storage = undef;
my $meta_type = undef;
my $operation = undef;

my $gridd;
if (-x "/usr/local/bin/gridd") {
	$gridd = "/usr/local/bin/gridd";
}
else {
	$gridd = "/usr/bin/gridd";
}

if (@ARGV == 4) {
	$ns_name = shift @ARGV;
	$storage = "/".(shift @ARGV);
	$meta_type = shift @ARGV;
	$operation = shift @ARGV;
} elsif (@ARGV == 3) {
	$ns_name = shift @ARGV;
	$storage = "";
	$meta_type = shift @ARGV;
	$operation = shift @ARGV;
} else {
	fail_print("Bad number of argument (3 or 4 required)\n");
	die "service tools misconfigured\r\n";
}

my $title =  "$ns_name${storage}/$meta_type";
my $BASEDIR = "/GRID/$ns_name${storage}";
my $LOGDIR = "$BASEDIR/logs";
my $out_srv =  "$LOGDIR/$meta_type.out";
my $RUNDIR = "$BASEDIR/run";
my $pid_file = "$RUNDIR/$meta_type.pid";
my $init_srv = "$BASEDIR/init/$meta_type.init";
my $conf_srv = "$BASEDIR/conf/$meta_type.conf";
my $conf_log = "$BASEDIR/conf/$meta_type.log4crc";
my $DATADIR = "/DATA/$ns_name${storage}/$meta_type";
my @start_args = ($gridd,$conf_srv,$conf_log);

sub get_pid {
	return undef if not stat $pid_file;
	open(FD,"<$pid_file") or return undef;
	my @lines = <FD>;
	close FD;
	my $pid = shift @lines;
	chomp $pid;
	return int $pid;
}

sub is_up {
	my $pid = shift;
	return 0 if not $pid;
	return 0 eq system("kill -0 $pid > /dev/null 2>&1");
}

sub check_manifest($)
{
	my $url = shift;
	my $path_manifest = "$DATADIR/.MANIFEST";
	open(FD, "<$path_manifest") or return undef;
	my @lines = <FD>;
	close(FD);

	my %res = ();
	while (my $l = shift @lines) {
		chomp $l;
		next if $l =~ m/^\s*$/;
		next if $l =~ m/^#$/;
		my ($k,$v) = split(/=/,$l,2);
		$k =~ s/\s+//g;
		$v =~ s/\s+//g;
		if ($k =~ m/gs.service.ns/) {
			if ($v ne $ns_name) {
				fail_print("failed");
				print("(manifest: already used for another namespace)\n");
				return 0;
			}
			$res{'ns'} = $v;
		} elsif ($k =~ m/gs.service.name/) {
			if ($v ne $url) {
				fail_print("failed");
				print("(manifest: already used by another service)\n");
				return 0;
			}
			$res{'name'} = $v;
		} elsif ($k =~ m/gs.service.type/) {
			if ($v !~ m/meta2/i) {
				fail_print("failed");
				print("(manifest: already used by another service type)\n");
				return 0;
			}
			$res{'type'} = 'meta2';
		}
	}

	if (3 != scalar(keys(%res))) {
		fail_print("failed");
		print("(manifest: uncomplete)\n");
		return 0;
	}

	return 1;
}

sub get_meta2_url
{
	open FD, "$conf_srv" or return 0;
	my @lines = <FD>;
	close(FD);

	while (my $l = shift @lines) {
		if ($l =~ /^param_meta2_address=(.*)$/) {
			my $ret = "$1";
			$ret =~ s/^\s*//;
			$ret =~ s/\s*$//;
			return $ret;
		}
	}
	return "";
}

sub start {
	
	bold_print("[gridd]"); print(" Starting $title ... ");

	# Creating run and logs directories if not exists
	if( ! -e "$RUNDIR" ) {
		mkdir("$RUNDIR");
		if ((getpwuid($>))[0] eq "root") { chown(120,220,"$RUNDIR"); }
	}
	if( ! -e "$LOGDIR" ) {
		mkdir("$LOGDIR");
		if ((getpwuid($>))[0] eq "root") { chown(120,220,"$LOGDIR"); }
	}

	my $parammeta2addr = get_meta2_url();

	# Check xattr on meta2 DATADIR with param_meta2_addr config var
	if( $meta_type =~ m/meta2-./ ) {
		my $cmdxattr = "/usr/bin/getfattr --only-values --absolute-names -n user.meta2_server.address $DATADIR 2>&1";
		my $retxattr = `$cmdxattr`;
		chomp $retxattr;
		if ($retxattr =~ m/not supported/i) {
			# Check for the Manifest
			if (!check_manifest($parammeta2addr)) {
				return 0;
			}
		}
		elsif ($retxattr !~ m/No such attribute/ ) {
			if ($retxattr ne $parammeta2addr) {
				fail_print("failed");
				print("(xattr: already used by another service)\n");
				return 0;
			}
		}
	}

	my $cmd;

	# Use an init script if exists and executable
	if( -x "$init_srv" ) {
		$cmd = ". $init_srv ; ";
	}

	$cmd .= join(" ", @start_args);
	$cmd .= " > $out_srv 2>&1";
	
	if (0 ne system($cmd)) {
		fail_print("failed\n");
		return 0;
	}

	# check for startup
	sleep 1;
	my @allpids = psauxw("$start_args[0]", "$start_args[1]");
	if (not @allpids) {
		fail_print("failed (process died immediately)\n");
		return 0;
	}
	
	# wait for PID written in the file
	my $pid = undef;
	for my $c (1 .. 5) {
		$pid = get_pid();
		if ($pid) {
			if (is_up($pid)) {
				success_print("done\n");
				return 1;
			} else {
				fail_print("failed (process died)\n");
				return 0;
			}
		}
		sleep 1;
	}

	fail_print("failed (pid not written)\n");
	return 0;
}

sub stop {

	bold_print("[gridd]"); print "Stopping $title ... ";
	
	my $killed = 0;
	my $pid = get_pid();
	
	while (is_up ($pid)) {
		$killed = 1;
		last if 0 ne system("kill $pid > /dev/null 2>&1");
		sleep 1;
	}

	if (is_up($pid)) {
		fail_print("failed\n");
		return 0;
	} elsif ($killed) {
		success_print("done\n");
		return 1;
	}
}

sub info {
	my $addr;

	open FD_CONF, "$conf_srv" or return 0;
	while(<FD_CONF>) {
		if (/^listen=(.*)$/) {
			$addr .= "[$1] ";
		}
	}
	close(FD_CONF);

	print "$meta_type ".$addr."- ";
}

sub status {
	my $pid = get_pid();
	my@pid_list;

	bold_print("[gridd]"); print(" Checking status of $title ... ");

	if (not defined($pid)) {
		@pid_list = psauxw("$start_args[0]", "$start_args[1]");
		if (@pid_list) {
			fail_print("broken (no pid file but server running)\n");
			return(2);
		} else {
			stop_print("stopped\n");
			return(0);
		}
	} elsif(is_up($pid)) {
		success_print("running\n");
		return(1);
	} else {
		stop_print("stopped (stale pid file)\n");
		return(0);
	}
}

sub clean {
	my (@pid_list);
	
	@pid_list = psauxw("$start_args[0]", "$start_args[1]");
	
	if (@pid_list) {
		bold_print("[gridd]");
		print " Killing $title ... ";
		if (kill(15, @pid_list)) {
			sleep 3;
			@pid_list = psauxw("$start_args[0]", "$start_args[1]");
			if (@pid_list) {
				if (kill(9, @pid_list)) {
					success_print("done\n");
					return 1;
				} else {
					fail_print("failed\n");
					return 0;
				}
			} else {
				success_print("done\n");
				return 1;
			}
		} else {
			fail_print("failed\n");
			return 0;
		}
	}
}

my $status;

if ($operation eq "start") {
	$status = status();
	if ($status == 0) {start() ? exit 0 : exit 1;}
	elsif ($status == 1) {exit 0;}
	elsif ($status == 2) {clean() && start() ? exit 0 : exit 1;}
} elsif ($operation eq "stop") {
	$status = status();
	if ($status == 0) {exit 0;}
	elsif ($status == 1) {stop() ? exit 0 : exit 1;}
	elsif ($status == 2) {clean() ? exit 0 : exit 1;}
} elsif ($operation eq "info") {
	exit(1) if not info();
	exit(0);
} elsif ($operation eq "status") {
	exit(1) if not status();
	exit(0);
}

